// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array memory;
    static int freeList;


    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let freeList = 2048;
        let memory[freeList] = 16384-2048;
        let memory[freeList+1] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int pointer,next,old,old_size;
        if (memory[freeList] > size) // need size+1 space
        {
            let old_size = memory[freeList];
            let memory[freeList] = size; // save array length
            let pointer = freeList + 1;
            let next = memory[freeList + 1];
            let freeList = freeList + size + 1;
            let memory[freeList] = old_size - size;
            let memory[freeList + 1] = next;
        }
        else
        {
            let old = freeList;
            let freeList = memory[freeList + 1];
            let pointer = Memory.alloc(size);
            let memory[old + 1] = freeList;
            let freeList = old;
        }
        return pointer;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o[-1] = o[-1] + 1;
        let o[0] = freeList;
        let freeList = o - 1;
        return;
    }    
}
