// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int length,maxlength;
    field Array string;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength = 0)
        {
            let maxLength = 1;
        }
        let length = 0;
        let maxlength = maxLength;
        let string = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do string.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let string[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(length < maxlength)
        {
            let string[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(length > 0)
        {
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int sum,i;
        var boolean flag;
        let sum = 0;
        let i = 0;
        let flag = false;
        while(i < length)
        {
            if(string[i] = 45) // '-'
            {
                let flag = true;
            }
            else
            {
                if(string[i] > 47 & string[i] < 58) // ascii 48 ~ 57
                {
                    let sum = sum * 10;
                    let sum = sum + string[i] - 48;
                }
                else
                {
                    let i = length;
                }
            }
            let i = i + 1;
        }
        if(flag)
        {
            return -sum;
        }
        return sum;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int tmp,i,start,end;
        let i = 0;
        if(val < 0)
        {
            let string[i] = 45;
            let val = Math.abs(val);
            let i = i + 1;
        }
        let start = i;
        while(~(val = 0))
        {
            let tmp = val;
            let val = val / 10;
            let tmp = tmp - (val * 10);
            let string[i] = tmp + 48;
            let i = i + 1;
        }
        let length = i;
        let end = i - 1;
        while(start < end)
        {
            let tmp = string[start];
            let string[start] = string[end];
            let string[end] = tmp;
            let start = start + 1;
            let end = end - 1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
