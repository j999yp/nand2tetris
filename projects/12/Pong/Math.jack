// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        return;
    }
        function int get_twoToThe(int i)
        {
            return twoToThe[i];
        }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0)
        {
            return -x;
        }
        else
        {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int i,sum,current_x;
        let i = 0;
        let sum = 0;
        let current_x = x;
        while (i < 16)
        {
            if(~((y & twoToThe[i]) = 0))
            {
                let sum = sum + current_x;
            }
            let current_x = current_x + current_x;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q,res;
        var boolean flag;
        let flag = true;
        if(x < 0)
        {
            let flag = ~flag;
        }
        if(y < 0)
        {
            let flag = ~flag;
        }

        let x = Math.abs(x);
        let y = Math.abs(y);
        if(y > x)
        {
            return 0;
        }

        let q = Math.divide(x,y+y);
        if((x-(2*q*y)) < y)
        {
            let res = q+q;
        }
        else
        {
            let res = q+q+1;
        }
        if(flag)
        {
            return res;
        }
        else
        {
            return -res;
        }
    }   

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int i,y,tmp;
        let y = 0;
        let i = 7; // log2(sqrt(32767)) = 7.5
        while(~(i = -1))
        {
            let tmp = y + twoToThe[i];
            let tmp = tmp * tmp;
            if(~(tmp > x) & (tmp > 0))
            {
                let y = y + twoToThe[i];
            }
            let i = i - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b)
        {
            return a;
        }
        else
        {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b)
        {
            return b;
        }
        else
        {
            return a;
        }
    }
}
