// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array screen;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        //256 行
        //一行 32 word
        var int i,j;
        let i = 0;
        while(i < 256)
        {
            let j = 0;
            while(j < 32)
            {
                let screen[i * 32 + j] = false;
                let j = j + 1;
            }
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int col,bit,addr;
        let col = x / 16;
        let bit = x - (col * 16);
        let addr = y * 32 + col;
        if(color) //black
        {
            let screen[addr] = screen[addr] | Math.get_twoToThe(bit);
        }
        else
        {
            let screen[addr] = screen[addr] & ~(Math.get_twoToThe(bit));
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx,dy,x,y;
        var int error;
        let dx = x2 - x1;
        let dy = y2 - y1;
        if((dx > 0) & (dy = 0)) //! 1
        {
            let x = x1;
            while(~(x > x2))
            {
                do Screen.drawPixel(x,y1);
                let x = x + 1;
            }
        }
        if((dx > 0) & (dy > 0)) //! 2
        {
            let error = 0;
            let x = x1;
            let y = y1;
            while((~(x > x2)) & (~(y > y2)))
            {
                do Screen.drawPixel(x,y);
                if(error > 0)
                {
                    let x = x + 1;
                    let error = error - dy;
                }
                else
                {
                    let y = y + 1;
                    let error = error + dx;
                }
            }
            do Screen.drawPixel(x,y);
        }
        if((dx = 0) & (dy > 0)) //! 3
        {
            let y = y1;
            while(~(y > y2))
            {
                do Screen.drawPixel(x1,y);
                let y = y + 1;
            }
        }
        if((dx < 0) & (dy > 0)) //! 4
        {   
            let error = 0;
            let x = x1;
            let y = y1;
            while((~(x < x2)) & (~(y > y2)))
            {
                do Screen.drawPixel(x,y);
                if(error < 0)
                {
                    let x = x - 1;
                    let error = error + dy;
                }
                else
                {
                    let y = y + 1;
                    let error = error + dx;
                }
            }
            do Screen.drawPixel(x,y);
        }
        if((dx < 0) & (dy = 0)) //! 5
        {
            let x = x1;
            while(~(x < x2))
            {
                do Screen.drawPixel(x,y1);
                let x = x - 1;
            }
        }
        if((dx < 0) & (dy < 0)) //! 6
        {
            let error = 0;
            let x = x1;
            let y = y1;
            while((~(x < x2)) & (~(y < y2)))
            {
                do Screen.drawPixel(x,y);
                if(error > 0)
                {
                    let x = x - 1;
                    let error = error + dy;
                }
                else
                {
                    let y = y - 1;
                    let error = error - dx;
                }
            }
            do Screen.drawPixel(x,y);
        }
        if((dx = 0) & (dy < 0)) //! 7
        {
            let y = y1;
            while(~(y < y2))
            {
                do Screen.drawPixel(x1,y);
                let y = y - 1;
            }
        }
        if((dx > 0) & (dy < 0)) //! 8
        {
            let error = 0;
            let x = x1;
            let y = y1;
            while((~(x > x2)) & (~(y < y2)))
            {
                do Screen.drawPixel(x,y);
                if(error < 0)
                {
                    let x = x + 1;
                    let error = error - dy;
                }
                else
                {
                    let y = y - 1;
                    let error = error - dx;
                }
            }
            do Screen.drawPixel(x,y);
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y,inc;
        let y = y1;
        if(y2 > y1)
        {
            let inc = 1;
        }
        else
        {
            let inc = -1;
        }
        while(~(y=y2))
        {
            do Screen.drawLine(x1,y,x2,y);
            let y = y + inc;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        let dy = -r;
        while(~(dy>r))
        {
            do Screen.drawLine(x-Math.sqrt((r*r)-(dy*dy)),y+dy,x+Math.sqrt((r*r)-(dy*dy)),y+dy);
            let dy = dy + 1;
        }
        return;
    }
}
